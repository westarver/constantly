package generate

import "github.com/westarver/constantly/app"

func WriteConstants() {
	RefreshPreview()
	SaveToFile(false) //false that its json
}

func PreviewString() string {
	var result = "// content generated by constantly\n"
	var appstr = "\n"
	if app.AppName() != "" {
		appstr = " for app " + app.AppName() + "\n"
	}
	if app.Author() != "" {
		result += "// from input by " + app.Author() + appstr
	}
	if app.PackageName() != "" {
		result += "\npackage " + app.PackageName() + "\n"
	}
	typ := app.UnderlyingType()
	if typ == "" {
		typ = "int"
	}

	result += "\ntype " + app.ConstType() + " " + typ + "\n"

	if app.GenStr() {
		result += "\nfunc (c " + app.ConstType() + ") String() string {\n\treturn constString(c)\n}\n"
	}
	if app.GenAssoc() {
		result += "\n\nfunc (c " + app.UnderlyingType() + ") Description() string {\n\treturn assocString(c)\n}\n"
	}
	if app.GenValue() {
		result += "\n\nfunc (c " + app.ConstType() + ") Value() " + app.ConstType() + " {\n\treturn constValue(c)\n}\n"
	}

	r := app.LastRow() + 1
	result += "\nconst (\n"
	for i := 0; i < r; i++ {
		res := makeLineFromTab(i) + "\n"
		//fmt.Println("preview", i, res)
		result += res
	}
	result += ")\n"

	if app.GenStr() {
		result += genStrFunc()
	}

	if app.GenAssoc() {
		result += genAssocFunc()
	}

	if app.GenValue() {
		result += genValueFunc()
	}

	if app.GenMarshal() {
		result += genMarshalFuncs()
	}
	result += "\n// end of content generated by constantly\n"
	return result
}

func RefreshPreview() {
	app.ApplicationData.preview.SetText(PreviewString())
}

func makeLineFromTab(row int) string {
	var comment string
	line := "\t"
	value := app.app.CellText(app.Value, row)
	assign := ""

	if len(value) > 0 {
		assign = " = "
	}

	if app.GenComment() {
		comment += "\t// " + app.app.CellText(app.Assoc, row)
	}

	line += app.app.CellText(app.Prefix, row) + app.app.CellText(app.BaseID, row) + app.app.CellText(app.Suffix, row)
	line += " " + app.app.CellText(app.Type, row) + assign + value

	if len(comment) > 0 {
		line = comment + "\n" + line
	}
	return line
}

func genStrFunc() string {
	var result string
	if app.GenStr() {
		result = "\nfunc constString(c " + app.ConstType() + ") string {\n"
		result += "\tswitch c {\n\t"
		r := app.LastRow() + 1
		for i := 0; i < r; i++ {
			name := app.CellText(app.Prefix, i) + app.CellText(app.BaseID, i) + app.CellText(app.Suffix, i)
			result += "case " + name + ":\n\t\t"
			result += `return "` + name + "\"\n\t"
		}
		result += "}\n\treturn \"\"\n}\n"
	}
	return result
}

func genAssocFunc() string {
	var result string
	if app.GenAssoc() {
		result = "\nfunc assocString(c " + app.ConstType() + ") string {\n"
		result += "\tswitch c {\n\t"
		r := app.LastRow() + 1
		for i := 0; i < r; i++ {
			name := app.CellText(app.Prefix, i) + app.CellText(app.BaseID, i) + app.CellText(app.Suffix, i)
			result += "case " + name + ":\n\t\t"
			result += `return "` + app.CellText(app.Assoc, i) + "\"\n\t"
		}
		result += "}\n\treturn \"\"\n}\n"
	}
	return result
}

func genValueFunc() string {
	var result string
	if app.GenValue() {
		result = "\nfunc constValue(c " + app.ConstType() + ") " + app.ConstType() + " {\n\n"
		result += "\treturn c \n}\n"
	}
	return result
}

func genMarshalFuncs() string { return "" }
